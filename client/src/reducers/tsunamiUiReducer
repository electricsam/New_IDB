import {fromJS} from 'immutable';

export const initialState = fromJS({
  eventModalIsOpen: false,
  eventModalTitle: null,
  eventModalValidValues: null,
  eventModalData: null,
  eventModalSecondaryData: null,
  eventModalComponent: null,
  runupModalIsOpen: false,
  runupModalTitle: null,
  runupModalValidValues: null,
  runupModalData: null,
  runupModalSecondaryData: null,
  runupModalComponent: null
});

export default function reducer(state = initialState, action){
  switch(action.type){
    case 'OPEN_TSUNAMI_EVENT_MODAL': {
      return state.merge(state, {
        eventModalIsOpen: true,
        eventModalTitle: action.payload.title,
        eventModalData: action.payload.data,
        eventModalValidValues: action.payload.validValues,
        eventModalSecondaryData: action.payload.secondaryData || null,
        eventModalComponent: action.payload.component || null
      });
    }
    case 'CLOSE_TSUNAMI_EVENT_MODAL': {
      return state.merge(state, {
        eventModalIsOpen: false
      });
    }
    case 'OPEN_TSUNAMI_RUNUP_MODAL': {
      return state.merge(state, {
        runupModalIsOpen: true,
        runupModalTitle: action.payload.title,
        runupModalData: action.payload.data,
        runupModalValidValues: action.payload.validValues,
        runupModalSecondaryData: action.payload.secondaryData || null,
        runupModalComponent: action.payload.component || null
      });
    }
    case 'CLOSE_TSUNAMI_RUNUP_MODAL': {
      return state.merge(state, {
        runupModalIsOpen: false
      });
    }
    default:
      return state;
  }
}